{
    "patches": [
        {
            "label": "2025-10-06_00-26-37",
            "content": "@@ -24,16 +24,14 @@\n def \n-_\n _init_\n-_\n (sel\n@@ -39,24 +39,25 @@\n , batteryMax\n+ \n : int):%0A    \n@@ -67,32 +67,33 @@\n  self.batteryMax\n+ \n : int = batteryM\n@@ -115,16 +115,17 @@\n .battery\n+ \n : int = \n@@ -146,16 +146,17 @@\n .display\n+ \n : float \n@@ -156,16 +156,17 @@\n  float =\n+ \n  0.0%0A%0A  \n@@ -175,15 +175,13 @@\n def \n-_\n _str_\n-_\n (sel\n@@ -258,16 +258,17 @@\n tery%7D%22%0A%0A\n+%0A\n     def \n@@ -331,16 +331,17 @@\n crement%0A\n+%0A\n         \n@@ -430,16 +430,17 @@\n  def sum\n+ \n (self, a\n@@ -448,32 +448,33 @@\n  float, b: float\n+ \n ) -%3E None:%0A     \n@@ -529,16 +529,17 @@\n  = a + b\n+ \n %0A       \n@@ -661,16 +661,17 @@\n : float)\n+ \n  -%3E None\n@@ -720,18 +720,18 @@\n  if b !=\n- \n 0\n+ \n :%0A      \n@@ -848,32 +848,35 @@\n elf.battery -= 1\n+   \n %0A        else:%0A \n@@ -923,17 +923,16 @@\n ente%22)%0A%0A\n-%0A\n def main\n@@ -943,16 +943,17 @@\n     calc\n+ \n : Calcul\n@@ -972,17 +972,18 @@\n uladora(\n-0\n+%22%22\n )%0A%0A    w\n@@ -1040,16 +1040,17 @@\n %22 + line\n+ \n )%0A      \n@@ -1055,16 +1055,17 @@\n     args\n+ \n : list%5Bs\n@@ -1188,16 +1188,17 @@\n tteryMax\n+ \n : int = \n@@ -1360,24 +1360,25 @@\n    increment\n+ \n : int = int(\n@@ -1420,16 +1420,20 @@\n crement)\n+    \n %0A       \n@@ -1461,32 +1461,33 @@\n %22:%0A            a\n+ \n : float = float(\n@@ -1500,32 +1500,33 @@\n %5D)%0A            b\n+ \n : float = float(\n@@ -1605,16 +1605,17 @@\n        a\n+ \n : float \n@@ -1644,16 +1644,17 @@\n        b\n+ \n : float \n@@ -1697,48 +1697,18 @@\n v(a,\n- \n b)\n-%0A%0A%0Aif __name__ == %22__main__%22:%0A\n     \n+%0A%0A\n main()\n-%0A\n",
            "lines": "61"
        },
        {
            "label": "2025-10-06_00-29-06",
            "content": "class Calculadora:\n    def __init__(self, batteryMax: int):\n        self.batteryMax: int = batteryMax\n        self.battery: int = 0\n        self.display: float = 0.0\n\n    def __str__(self):\n        return f\"display = {self.display:.2f}, battery = {self.battery}\"\n\n    def charge(self, increment: int):\n        self.battery += increment\n        if self.battery > self.batteryMax:\n            self.battery = self.batteryMax\n\n    def sum(self, a: float, b: float) -> None:\n        if self.battery > 0:\n            self.display = a + b\n            self.battery -= 1\n        else:\n            print(\"fail: bateria insuficiente\")\n\n    def div(self, a: float, b: float) -> None:\n        if self.battery > 0:\n            if b != 0:\n                self.display = a / b\n            else:\n                print(\"fail: divisao por zero\")\n            self.battery -= 1\n        else:\n            print(\"fail: bateria insuficiente\")\n\n\ndef main():\n    calc: Calculadora = Calculadora(0)\n\n    while True:\n        line = input()\n        print(\"$\" + line)\n        args: list[str] = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"init\":\n            batteryMax: int = int(args[1])\n            calc = Calculadora(batteryMax)\n        elif args[0] == \"show\":\n            print(calc)\n        elif args[0] == \"charge\":\n            increment: int = int(args[1])\n            calc.charge(increment)\n        elif args[0] == \"sum\":\n            a: float = float(args[1])\n            b: float = float(args[2])\n            calc.sum(a, b)\n        elif args[0] == \"div\":\n            a: float = float(args[1])\n            b: float = float(args[2])\n            calc.div(a, b)\n\n\nif __name__ == \"__main__\":\n    main()\n",
            "lines": "62"
        }
    ]
}